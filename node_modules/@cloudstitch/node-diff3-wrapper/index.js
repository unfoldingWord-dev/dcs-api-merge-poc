"use strict";
var childProcess = require("child_process");
var path = require("path");
var which_1 = require("which");
function callChild(path, stdin, allowFail) {
    var args = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
    }
    return new Promise(function (resolve, reject) {
        if (!path) {
            return reject("");
        }
        var proc = childProcess.spawn(path, args);
        var stdout = "";
        proc.stdout.on("data", function (data) {
            stdout = stdout + data.toString();
        });
        proc.on("close", function (code, signal) {
            if (code !== 0) {
                if (allowFail && allowFail === code) {
                    resolve(stdout);
                }
                else {
                    reject(code);
                }
            }
            else {
                resolve(stdout);
            }
        });
        if (stdin) {
            proc.stdin.write(stdin);
            proc.stdin.end();
        }
    });
}
var binDir = path.join(__dirname, "bin");
var diff3Path;
try {
    if (process.platform === "win32") {
        diff3Path = path.join(binDir, "diff3.exe");
    }
    else {
        diff3Path = which_1.sync("diff3");
    }
}
catch (e) {
    if (process.platform !== "win32") {
        console.error("module node-diff3-wrapper requires gnu difftools to be on the path");
    }
}
var Diff3;
(function (Diff3) {
    function diff(fileA, fileO, fileB, stdin) {
        return callChild(diff3Path, stdin, null, fileA, fileO, fileB);
    }
    Diff3.diff = diff;
    function diffM(fileA, fileO, fileB, stdin) {
        return callChild(diff3Path, stdin, 1, "-m", fileA, fileO, fileB);
    }
    Diff3.diffM = diffM;
})(Diff3 = exports.Diff3 || (exports.Diff3 = {}));
