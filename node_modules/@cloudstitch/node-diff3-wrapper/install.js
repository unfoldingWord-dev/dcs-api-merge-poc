"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var url = require("url");
var http = require("http");
var https = require("https");
var path = require("path");
var fs = require("fs");
var JSZip = require("jszip");
var which_1 = require("which");
/**
 * If something happens we will bail with error status code
 */
var cleanExit = false;
process.on("exit", function () {
    if (!cleanExit) {
        console.error("Install process did not exit cleanly");
        process.exit(1);
    }
});
/**
 * This is used to make http requests try to handle things in general.
 */
function makeRequest(httpModule, options) {
    return new Promise(function (resolve, reject) {
        console.log("making request to " + options.path);
        var req = httpModule.request(options, function (result) {
            var data = [], total = 0;
            result.on("data", function (datum) {
                total = total + datum.length;
                data.push(datum);
            });
            result.on("end", function () {
                result["data"] = Buffer.concat(data, total);
                if (result.statusCode >= 200 && result.statusCode < 300) {
                    resolve(result);
                }
                else {
                    reject(result);
                }
            });
        });
        if (options.utf8) {
            req.setEncoding("utf8");
        }
        req.on("error", function (error) {
            reject(error);
        });
        if (options.method.toLowerCase() !== "get") {
            req.write(options.data);
        }
        req.end();
    });
}
/**
 * Get the resource at the given url
 */
function getUrl(path, utf8) {
    return __awaiter(this, void 0, void 0, function () {
        var requestModule, parsedUrl, req, body, res, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parsedUrl = url.parse(path);
                    if (parsedUrl.protocol === "http:") {
                        requestModule = http;
                    }
                    else if (parsedUrl.protocol === "https:") {
                        requestModule = https;
                    }
                    req = {
                        host: parsedUrl.host,
                        port: parsedUrl.port,
                        path: parsedUrl.path,
                        protocol: parsedUrl.protocol,
                        method: "GET",
                        headers: {
                            //Setting this user agent convices sf to work reasonably
                            "User-Agent": "curl/7.52.1"
                        },
                        utf8: utf8
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, makeRequest(requestModule, req)];
                case 2:
                    res = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    if (err_1.statusCode) {
                        res = err_1;
                        if (res.statusCode === 302 || res.statusCode === 301) {
                            console.log("redirecting to " + res.headers.location);
                            return [2 /*return*/, getUrl(res.headers.location, !!utf8)];
                        }
                        else {
                            throw err_1;
                        }
                    }
                    else {
                        throw err_1;
                    }
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, res.data];
            }
        });
    });
}
var diff3Url = "https://sourceforge.net/projects/gnuwin32/files/diffutils/2.8.7-1/diffutils-2.8.7-1-bin.zip/download";
// bin/diff3
var libIntUrl = "https://sourceforge.net/projects/gnuwin32/files/libintl/0.14.4/libintl-0.14.4-bin.zip/download";
// bin/libintl3.dll
var libIconvUrl = "https://sourceforge.net/projects/gnuwin32/files/libiconv/1.9.2-1/libiconv-1.9.2-1-bin.zip/download";
// bin/libiconv2.dll
var getFile = function (url, filePaths, outputPath) { return __awaiter(_this, void 0, void 0, function () {
    var data, zip, _i, filePaths_1, filePath, fileData, binDir_1, filePathParts, fileName;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, getUrl(url)];
            case 1:
                data = _a.sent();
                zip = new JSZip();
                return [4 /*yield*/, zip.loadAsync(data)];
            case 2:
                zip = _a.sent();
                _i = 0, filePaths_1 = filePaths;
                _a.label = 3;
            case 3:
                if (!(_i < filePaths_1.length)) return [3 /*break*/, 6];
                filePath = filePaths_1[_i];
                return [4 /*yield*/, zip.file(filePath).async("nodebuffer")];
            case 4:
                fileData = _a.sent();
                binDir_1 = path.join(__dirname, "bin");
                filePathParts = filePath.split("/");
                fileName = filePathParts[filePathParts.length - 1];
                fs.writeFileSync(path.join(outputPath, fileName), fileData);
                _a.label = 5;
            case 5:
                _i++;
                return [3 /*break*/, 3];
            case 6: return [2 /*return*/];
        }
    });
}); };
var binDir = path.join(__dirname, "bin");
var getDiff3 = function () { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, getFile(diff3Url, ["bin/diff3.exe", "bin/diff.exe"], binDir)];
    });
}); };
var getLibInt = function () { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, getFile(libIntUrl, ["bin/libintl3.dll"], binDir)];
    });
}); };
var getLibIConv = function () { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, getFile(libIconvUrl, ["bin/libiconv2.dll"], binDir)];
    });
}); };
var diff3Path;
try {
    diff3Path = which_1.sync("diff3");
}
catch (e) { } // wasn't found
if (process.platform === "win32" && !diff3Path) {
    fs.mkdirSync(binDir);
    var promises = [getDiff3(), getLibInt(), getLibIConv()];
    Promise.all(promises).then(function () {
        console.log("ok");
        cleanExit = true;
    }, console.log).catch(console.log);
}
else {
    console.log("This does not appear to be windows, skipping.");
    cleanExit = true;
}
